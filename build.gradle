plugins {
    id 'java'
    // Consider using a released Spring Boot version (e.g., 3.3.0 or 3.2.6) unless you specifically need 3.4.1 features
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco' // Added JaCoCo plugin
    // Use a recent SonarQube plugin version
    id 'org.sonarqube' version '4.4.1.3373' // Added SonarQube plugin
}

group = 'com.meta' // Adjust if this service has a different group
version = '0.0.1-SNAPSHOT' // Adjust if needed

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.0")
    set('testcontainersVersion', "1.19.7")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.7.0'
    implementation 'org.modelmapper:modelmapper:2.1.1'
    implementation 'io.github.cdimascio:java-dotenv:5.2.2'
    implementation 'org.keycloak:keycloak-core:22.0.1'
    implementation 'com.auth0:java-jwt:4.4.0'
    implementation 'org.springframework.cloud:spring-cloud-circuitbreaker-resilience4j'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j:8.0.33'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation 'io.rest-assured:json-path:5.4.0'
    testImplementation 'io.rest-assured:xml-path:5.4.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // Testcontainers
    testImplementation 'org.testcontainers:testcontainers:1.19.7'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.7'
    testImplementation 'org.testcontainers:mysql:1.19.7'

    // Spring Boot Testcontainers integration
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}



jacoco {
    toolVersion = "0.8.11" // Set JaCoCo version
}

// ✅ JaCoCo test report configuration
jacocoTestReport {
    dependsOn test // Ensures tests run before reports are generated
    reports {
        xml.required = true  // Required for SonarCloud
        html.required = false // Disable HTML report if not needed
        csv.required = false  // Disable CSV report if not needed
    }
    // Define class/package exclusions for coverage report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [
                    '**/config/**',       // Configuration classes
                    '**/exception/**',    // Custom exception classes
                    '**/model/**',       // Data models / entities (if any in gateway)
                    '**/dto/**',         // Data transfer objects (if any in gateway)
                    '**/Application*',    // Main application class
                    // Add specific Gateway/filter classes if they are trivial/untestable and should be excluded
            ])
        }))
    }
}

// ✅ SonarQube (SonarCloud) configuration
sonarqube {
    properties {
        // IMPORTANT: Set a UNIQUE project key if this is a SEPARATE project on SonarCloud
        // Or use the SAME key if it's a MODULE within the main project.
        property "sonar.projectKey", "Learnathon-By-Geeky-Solutions_code-warriors-" // CHANGE IF NEEDED
        property "sonar.organization", "learnathon-by-geeky-solutions"
        property "sonar.host.url", "https://sonarcloud.io"
        // Remove sonar.login - Pass token via command line arg in CI (-Dsonar.login=...)

        // Define coverage exclusions for SonarCloud reporting (mirror JaCoCo or adjust)
        property "sonar.coverage.exclusions", "**/config/**,**/exception/**,**/model/**,**/dto/**,**/Application*"

        // Explicitly setting this is often redundant if JaCoCo plugin is applied correctly, but doesn't hurt
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

// ✅ Test task configuration
tasks.named('test', Test) { // Specify Test type
    useJUnitPlatform()
    // Add JVM args consistent with other services if needed for testing environment/libraries
    jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/java.util=ALL-UNNAMED'
    systemProperty "mockito.mock.creation.default", "mock-maker-inline" // If using Mockito inline mocking

    finalizedBy jacocoTestReport // Hook JaCoCo report generation to run after tests finish
}

// Removed the custom print task as it's not needed for the final SonarCloud setup
// task printRuntimeClasspath { ... }